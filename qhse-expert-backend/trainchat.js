const fs = require('fs');
const path = require('path');
const { spawn } = require('child_process');
const qaPairs = require('./qaPairs');

async function trainAndSaveModel() {
    try {
        // Define the path for embeddings file
        const embeddingsPath = path.resolve(__dirname, 'qaEmbeddings.json');

        // Load existing embeddings if they exist, otherwise initialize an empty object
        let existingEmbeddings = {};
        if (fs.existsSync(embeddingsPath)) {
            existingEmbeddings = JSON.parse(fs.readFileSync(embeddingsPath, 'utf8'));
        } else {
            // Create an empty embeddings file if it doesn't exist
            fs.writeFileSync(embeddingsPath, JSON.stringify({}));
        }

        // Save the QA pairs to a temporary file for processing by the Python script
        const tempQaPairsPath = path.resolve(__dirname, 'tempQaPairs.json');
        fs.writeFileSync(tempQaPairsPath, JSON.stringify(qaPairs, null, 2));

        // Call the Python script to generate BERT embeddings
        const pythonProcess = spawn('python3', ['bert_embeddings.py', tempQaPairsPath]);

        pythonProcess.stdout.on('data', (data) => {
            try {
                // Parse the new embeddings generated by the Python script
                const newEmbeddings = JSON.parse(data.toString());

                // Merge new embeddings with existing embeddings
                const updatedEmbeddings = { ...existingEmbeddings, ...newEmbeddings };

                // Save updated embeddings
                fs.writeFileSync(embeddingsPath, JSON.stringify(updatedEmbeddings, null, 2));
                console.log('Model trained and saved');

                // Delete the temporary QA pairs file
                fs.unlinkSync(tempQaPairsPath);
            } catch (error) {
                console.error('Error parsing embeddings from Python script:', error.message);
            }
        });

        pythonProcess.stderr.on('data', (data) => {
            console.error('Error from Python script:', data.toString());
        });

        pythonProcess.on('close', (code) => {
            if (code !== 0) {
                console.error(`Python script exited with code ${code}`);
            }
        });
    } catch (error) {
        console.error('Error training model:', error.message);
        throw error;
    }
}

module.exports = {
    trainAndSaveModel
};
